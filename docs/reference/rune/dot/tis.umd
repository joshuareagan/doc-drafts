:-  :~  navhome/'/docs/'
        next/'true'
        sort/'4'
        title/'.= "dottis"'
    ==
;>

# `.=  "dottis"`

`[%dtts p=hoon q=hoon]`: test for equality with Nock `5`.

## Produces

%.y` if `p` equals `q`; otherwise `%.n`.

## Syntax

Regular: *2-fixed*.

Irregular: `=(a b)` is `.=(a b)`.

## Discussion

The test for equality includes a type check.  Either the type of `p` must nest under the type of `q`, or _vice versa_.  Otherwise the result is a crash.

Like Nock equality, `.=` ("dottis") tests if two nouns are the same,
ignoring invisible pointer structure.  Because in a conventional
noun implementation each noun has a lazy short hash, comparisons
are fast unless the hash needs to be computed, or we are comparing
separate copies of identical nouns.  (Comparing large duplicates
is a common cause of performance bugs.)

## Examples

```
> .=(0 0)
%.y

> =(0 0)
%.y

> .=(1 2)
%.n

> =(1 2)
%.n

> =(12 [12 14])
nest-fail
```
